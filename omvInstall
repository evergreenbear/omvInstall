#!/bin/bash

##
## omvInstall: quickly install OpenMandriva from minimal ISO
##

# modified from https://gist.github.com/dotike/8257326
shout() { printf "\n${bold}error:${clear} $*" >&2; }
die() { shout "$*"; exit 111; }
try() { "$@" || die "cannot $*"; }

## colors for fancy output
declare -r red='\033[0;31m'
declare -r redbold='\033[01;31m'
declare -r greenbold='\033[01;32m'
declare -r cyan='\033[0;36m'
declare -r cyanbold='\033[01;36m'
declare -r magenta='\033[0;35m'
declare -r magentabold='\033[01;35m'
declare -r bold='\033[01m'
declare -r clear='\033[0m'
declare -r bluebg='\e[48;5;24m'

## global variables
[[ -d /sys/firmware/efi ]] && declare -r sys_isUEFI=1 || declare -r sys_isUEFI=0

usage() {
	printf "$(
	cat <<- EOF
	${bold}omvInstall${clear}: quick installer for OMV minimal snapshots
	
	${bold}usage${clear}:
	${bold}foo${clear}: does foo action (-f|--foo)
	${bold}bar${clear}: does bar action (-b|--bar)
	EOF
	)"
	exit 1
}

ribbon() {
	local cols=$(tput cols); local text="$1"; local padding=$((cols - ${#text}))

	clear
	tput sc #save cursor
	tput cup $(tput lines) 0 #move cursor to last line
	echo -en "${bluebg}${bold}${text}$(printf ' %.0s' $(seq 1 $padding))\e[0m" #set colors, print text, reset colors
	tput rc #reload cursor
}

# returns: selectedItem
selector() {
	cmdIn=$(eval "$1")
	readarray -t items <<<"$cmdIn"

	## init variables
	cursor=0
	search_query=""
	filteredItems=("${items[@]}")

	while true; do
		filteredItems=()
		for item in "${items[@]}"; do
			# if timezone, in lowercase, matches any part of search query, in lowercase, add to filtered results list
			[[ "${item,,}" == *"${search_query,,}"* ]] && filteredItems+=("$item")
		done

		clear
		local index=0; local start_index=$((cursor - 5))
		[[ $start_index -lt 0 ]] && start_index=0 #ensure start index is not negative

		# for as long as the items to list are not higher than 10 at one time; do
		for ((i = start_index; i < start_index + 10; i++)); do
			if [ $i -eq $cursor ]; then
				echo -e "\e[7m${filteredItems[$i]}\e[0m" # highlight current selection
			elif [ $i -lt ${#filteredItems[@]} ]; then
				echo "${filteredItems[$i]}"
			fi
		done

		# read user input
		read -rsn1 input
		case "$input" in
			$'\e') # arrow keys / other escape sequences
				read -rsn2 -t 0.001 key # read next two chars into 'key'
				case "$key" in
					'[A') ((cursor--)); [[ "$cursor" -lt 0 ]] && cursor=$(( ${#filteredItems[@]} - 1 ));; #up
					'[B') ((cursor++)); [[ "$cursor" -ge "${#filteredItems[@]}" ]] && cursor=0;; #down
				esac
				;;
			"") selectedItem="${filteredItems[$cursor]}"; break;; #return key
			$'\x7f') [[ ${#search_query} -gt 0 ]] && search_query="${search_query:0:-1}";; #backspace key
			*) search_query+="$input"; cursor=0;; #process all other keys as a keyword search and reset cursor to focus closest match
		esac

		# keep cursor from flying away
		if [ $cursor -lt 0 ]; then
			cursor=$(( ${#filteredItems[@]} - 1 ))
		elif [ $cursor -ge ${#filteredItems[@]} ]; then
			cursor=0
		fi
	done
}

yayOrNay() {
	while true; do
		printf "${bold}$1${clear} (Y/n/?)  "; read input
		case "${input,,}" in
       		"y"|"") return 0 ;;
			"n") return 1 ;;
		 	"?") printf "\n$2\n" ;; 
			*) echo "Not a Y/n input: $1"
		esac
	done
}

promptOpenEnded() {
	printf "${bold}$1${clear}  "; read $2
}

dropToShell() {
	printf "\n${bold}$1${clear}"
	printf "\n${cyanbold}WHEN FINISHED, RETURN TO SCRIPT BY RUNNING ${clear}${bold}'exit'${clear}\n\n"
	PS1="[ ${bold}SUBSHELL${clear} \w ]# " /bin/sh
}

configureZram() {
	## zram-init
	dnf in -y zram-init
	for service in "zram_swap" "zram_var" "zram_var_tmp"; do try systemctl enable "$service".service; done
}

stepWelcome() {
	printf "$(
	cat <<- EOF
	${cyanbold}✱
	OMV Snapshot Simple Installer
	✱${clear}${bold}

	welcome! this is a simple installer for OMV minimal snapshots.
	EOF
	)"

	sleep 1; clear
	return 0
}

confGeneral() {
	clear #; ribbon "general configuration"
	selector 'timedatectl list-timezones'
	printf "${clearbold}Please select a timezone. Use up/down keys to navigate, or type to search.${clear}\n"
	#selector 'timedatectl list-timezones'
	echo "got it! selected timezone is $selectedItem"
	# follow Calamares' outline:
	## timezone/locale
	## kbd layout
	## partitions
	## install
	## reboot
	
}

stepPartition() {
	clear; ribbon "partitioning"
	lsblk
	printf "${bold}Disk to use : ${clear}"; read partitionDisk; partitionDisk="/dev/${partitionDisk##*/}"
	[[ -z "$(blkid | grep $partitionDisk)" ]] && die "invalid disk $partitionDisk"
	if checkYesNo "Partition disk automatically?" "Use an automatic layout: 1GB EFI partition if applicable and root partition w/ BTRFS submounts"; then
		## automatic partitioning selected
		## if UEFI
		if [[ "$sys_isUEFI" == "1" ]]; then
			try dnf install -y gptfdisk
			(
			echo o     #new GPT partition table
			echo y     #confirm new GPT partition table
			echo n     #new partition
			echo 1     #partition number
			echo       #start sector
			echo +1G   #end sector
			echo ef00  #partition type (EFI)
			echo n     #new partition
			echo 2     #partition number
			echo       #start sector  [default]
			echo       #end sector [default]
			echo       #partition type [default, 8300]
			echo w     #write to disk
			echo y     #confirm write to disk
			) | try gdisk "$partitionDisk" 
		else
		## if BIOS
			(
			echo o     #new MBR partition table
			echo n     #new partition
			echo p     #primary partition
			echo 1     #partition number
			echo       #start sector [default]
			echo       #end sector [default]
			echo w     #write to disk
			) | try fdisk "$partitionDisk"
		fi
	else
		## manual partitioning
		# drop to cfdisk and return when done
		printf "${bold}You are now being exiled to cfdisk to configure partitions.${clear}"; sleep 3
		try cfdisk "$partitionDisk"; clear
		declare -A partitionList < <(lsblk -n -l -o NAME | grep "${partitionDisk##*/}[0-999]")
		# prompt for filesystem and mountpoint for each partition
    	for partition in "${!partitionList[@]}"; do
        	printf "${bold}Filesystem for${clear} $partition?  "; read filesystem
        	printf "${bold}Mountpoint for${clear} $partition?  "; read mountpoint

        	# Format the partition
        	try mkfs.$filesystem "/dev/$partition"

        	# Create the mountpoint directory
        	try mkdir -p "/mnt$mountpoint"

        	# Mount the partition
        	try mount "/dev/$partition" "/mnt$mountpoint"

        	# Add entry to /etc/fstab
        	echo "/dev/$partition   $mountpoint   $filesystem   defaults   0   0" >> ./tmp/fstab
    done	
	fi
	return 0
}

partitioningPostChroot() {
	dropToShell "You are now being dropped to a shell to manually configure disks.\nPlease partition, format, configure subvolumes if applicable, and other such things here.\nPlease remember that ${cyanbold}OMV has not yet been installed on the drive${clear}${bold}, and ${cyanbold}you are still working within a live environment${clear}${bold}. You will be prompted to configure fstab and other related things later.\n"
}

main() {
	### sanity check
	#[[ "$#" -eq 0 ]] && usage
	# install rsync if not already installed
	#[[ -z "$(rpm -qa | grep rsync)" ]] && try dnf install -y rsync
	# if system is uefi, install dosfstools if not already installed
	#[[ "$sys_isUEFI" -eq 1 ]] && \
	#	if ! rpm -qa | grep dosfstools; then try dnf install -y dosfstools; fi
	
	try stepWelcome
	try confGeneral
	#try stepPartition
}

main "$@"
