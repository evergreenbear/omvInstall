#!/bin/bash

##
## install omv from live build, hard-coded for ursidae
## (minimal, from-ABF-iso EFI install on btrfs, with subvols X, and zram)
##

[[ "$EUID" -ne 0 ]] && echo "error: run this script as root" && exit 1

# winxp-style step ribbon (to scale coolness factor ofc)
declare -r bold='\033[01m'
declare -r bluebg='\e[48;5;24m'
ribbon() {
	local cols=$(tput cols); local text="$1"; local padding=$((cols - ${#text}))
	clear; tput sc #save cursor
	tput cup $(tput lines) 0 #move cursor to last line
	echo -en "${bluebg}${bold}${text}$(printf ' %.0s' $(seq 1 $padding))\e[0m" #set colors, print text, reset colors
	tput rc #reload cursor
}

main() {
	# grab pkgKeep.list
	curl -fLO u.ursid.xyz/pkgKeep.list

	ribbon "partitioning..."
	# locale & keymap
	timedatectl set-locale America/Denver
	localectl set-keymap us

	# partitioning (nvme0n1, p1 boot, p2 root; user input required for cfdisk. switch to fdisk if you want automation)
	cfdisk /dev/nvme0n1
	mkfs.fat -F32 /dev/nvme0n1p1
	mkfs.btrfs /dev/nvme0n1p2
	dnf in -y rsync
	mkdir -p /mnt/boot/efi
	mount /dev/nvme0n1p1 /mnt/boot/efi
	mount /dev/nvme0n1p2 /mnt

	# subvol creation (OMV style; root, boot, home, /var{cache,log}, with @snapshots for snapper)
	btrfs su cr /mnt/@
	btrfs su cr /mnt/@boot
	btrfs su cr /mnt/@home
	btrfs su cr /mnt/@snapshots
	btrfs su cr /mnt/@var_cache
	btrfs su cr /mnt/@var_log

	# remount as subvolumes
	umount /mnt/boot/efi
	umount /mnt

	mount -o noatime,space_cache=v2,subvol=@ /dev/nvme0n1p2 /mnt
	mount /dev/nvme0n1p1 /mnt/boot/efi
	mkdir -p /mnt/boot && mount -o noatime,space_cache=v2,subvol=@boot /dev/nvme0n1p2 /mnt/boot
	mkdir -p /mnt/home && mount -o noatime,space_cache=v2,subvol=@home /dev/nvme0n1p2 /mnt/boot
	mkdir -p /mnt/.snapshots && mount -o noatime,space_cache=v2,subvol=@snapshots /dev/nvme0n1p2 /mnt/.snapshots
	mkdir -p /mnt/var/cache && mount -o noatime,space_cache=v2,subvol=@var_cache /dev/nvme0n1p2 /mnt/var/cache
	mkdir -p /mnt/var/log && mount -o noatime,space_cache=v2,subvol=@var_log /dev/nvme0n1p2 /mnt/var/log

	ribbon "copying system..."
	# copy iso in real time
	rsync -av --one-file-system / /mnt

	ribbon "configuring system..."
	# remove packages not in pkgKeep.list 
	readarray -t pkgKeep < pkgKeep.list
	readarray -t pkgList <<<$(rpm -qa --qf "%{NAME}\n")

	for pkg in "${pkgList[@]}"; do
		case "${pkgKeep[@]}" in
			*"$pkg"*) true ;;
			*) sudo dnf -y --installroot=/mnt rm "$pkg" ;;
		esac
	done

	# install packages in pkgKeep.list that we do not have
	for pkg in "${pkgKeep[@]}"; do
		case "${pkgList[@]}" in
			*"$pkg"*) true ;;
			*) sudo dnf -y --installroot=/mnt in "$pkg" ;;
		esac
	done

	# yoink genfstab from arch & generate /etc/fstab
	curl -fLO https://raw.githubusercontent.com/glacion/genfstab/master/genfstab | bash genfstab -U /mnt

	# hosts file
	cat <<- EOF > /mnt/etc/hosts
		# Standard host addresses
		127.0.0.1  localhost
		::1        localhost ip6-localhost ip6-loopback
		ff02::1    ip6-allnodes
		ff02::2    ip6-allrouters
		# This host address
		127.0.1.1  ursidae
	EOF

	# zram (caches memory pages instead of storing pages on-disk like swap, figure out which you want)
	cat <<- EOF > /usr/lib/systemd/zram-generator.conf
		# This config file enables a /dev/zram0 device with the default settings:
		# — size — half of available RAM
		# — compression — zstd
		#
		# To disable, uninstall zram-generator-defaults or create empty
		# /etc/systemd/zram-generator.conf file.
		[zram0]
		zram-size = ram/2
		compression-algorithm = zstd
	EOF

	# prepare mounts for bootloader install
	mount --bind /dev /mnt/dev
 	mount --bind /tmp /mnt/tmp
 	mount --bind /run /mnt/run
 	mount -t proc proc /mnt/proc
 	mount -t sysfs none /mnt/sys
 	mount -t devpts -o noexec,nosuid,gid=tty,mode=0620 devpts /mnt/dev/pts	
	mount --bind /sys/firmware/efi/efivars /mnt/sys/firmware/efi/efivars

	# enter /mnt
	chroot /mnt /bin/bash

	# users & passwords
	useradd -mG wheel  evergreen
	passwd root
	passwd evergreen
	EDITOR=vim visudo # manually enable wheel

	# bootloader
	grub2-install /mnt/boot/efi --bootloader-id=OpenMandriva
	grub2-mkconfig /boot/grub2/grub.cfg	

	# preferred configs
	hostnamectl set-hostname ursidae

	# snapshots (snapper, 30:00 of video)
	## setting up snapper must be done after reboot (but verify this)
}

main
